import React, {

  useState,

  useCallback,

  useEffect,

  useMemo,

  useRef,

} from "react";

import { useFormik, Formik, Field } from "formik";

import { Modal, ModalBody, ModalFooter } from "reactstrap";

import BreadCrumb from "../../../components/breadcrumb";

import StatusBar from "../../../components/status-header";

import Tab from "../../../components/tab";

import { IoMdCopy } from "react-icons/io";

import { TbSettings } from "react-icons/tb";

import "../riskAssessment.scss";

import { FormValues } from "./interface/systemFmeca";

import * as Yup from "yup";

import { FMECATypeLabels, statusData } from "../../../data/dropDownData";

import { useParams, useLocation } from "react-router-dom";

import { FMECAStatus } from "../../../interfaces/enum/fmecaStatus";

import { FMECAType } from "../../../interfaces/enum/fmecaType";

import SelectField from "../../../components/single-select";

import InputField from "../../../components/input";

import MultiSelect from "../../../components/multi-select";

import RiskAssessmentModal from "../../../components/modal/RiskAssessmentModal";

import {

  extractKeyValue,

  convertArrayToString,

  convertToObject,

  formatDate,

} from "../../../utils/formatter";

import {

  ADMIN,

  ORIGINATOR,

  PROJECT_OWNER,

  PROJECT_TEAM,

  ACTION_OWNER,

} from "../../../constants/constant";

import { useAppDispatch, useAppSelector } from "../../../store";

import {

  getPartRiskByFMECAId,

  deletePartRiskFromDb,

  createPartRisk,

  updatePartRisk,

  getFMECAHeaderByFMECAID,

  updateFMECAHeader,

  getFMECANotesByFMECAID,

  createFMECANotes,

  updateFMECANotes,

} from "./systemFMECASlice";

import useFetch from "../../initiate-fmeca/useFetch";

import { GET, POST, PUT } from "../../initiate-fmeca/ApiInterface";

import { AiOutlinePlusCircle } from "react-icons/ai";

import { RxAvatar } from "react-icons/rx";

import { BsArrowsFullscreen } from "react-icons/bs";

import AgGridComponent from "../../../components/grid/simple-grid";

import { FullScreen, useFullScreenHandle } from "react-full-screen";

import { useQuill } from "react-quilljs";

import "quill/dist/quill.snow.css";

import { RiAttachmentFill } from "react-icons/ri";

import { PopupCellRenderer } from "../../../components/grid/attachment-popup";

import uuid from "react-uuid";

import DatePicker from "react-datepicker";

import "react-datepicker/dist/react-datepicker.css";

import { useNavigate } from "react-router-dom";

import { http } from "../../../config/HttpCommon";

import apiUrl from "../riskAssessmentApiUrl";

import AlertMsg from "../../../components/modal/Alert";

import Loader from "../../../components/loader";

import RiskSummaryModal from "../risk-summary-modal";

import { AutocompleteSelectCellEditor } from "ag-grid-autocomplete-editor";

import "ag-grid-autocomplete-editor/dist/main.css";

import { baseUrl } from "../../../constants/apiUrl";

import { GrValidate } from "react-icons/gr";

import { FcApproval } from "react-icons/fc";

import parse from "html-react-parser";

import { AttachmentRenderer } from "../../../components/grid/attachment-renderer";

import AttachmentModal from "../../../components/modal/AttachmentModal";

import useAttachment from "../../../hooks/useAttachment";

import { AiOutlineClose } from "react-icons/ai";

import { BsThreeDotsVertical } from "react-icons/bs";

import axios from "axios";



// import parse from 'html-react-parser';

// import mockData from "./rowData.json";



const SystemFMECA = () => {

  const dispatch = useAppDispatch();

  const { uploadFiles, getAttachments, attachments, deleteAttachment } =

    useAttachment();



  const [showAttachmentModal, setShowAttachmentModal] = useState(false);

  const [attachmentParams, setAttachmentParams] = useState({});



  const handle = useFullScreenHandle();

  const { state } = useLocation();



  let { id, fmecaType }: any = useParams();



  let referenceID: any = state && state.fmecaID;



  // let referenceID: any = 1001;



  const getPartRiskData = useCallback(

    async (referenceID: number) => {

      await dispatch(getFMECAHeaderByFMECAID(referenceID));

      await dispatch(getPartRiskByFMECAId(referenceID));

      await dispatch(getFMECANotesByFMECAID(referenceID));

    },

    [dispatch]

  );



  useEffect(() => {

    if (referenceID) {

      referenceID = Number(JSON.parse(referenceID));

      getPartRiskData(referenceID);

    }

  }, [referenceID]);



  const { partRiskData } = useAppSelector((state: any) => state.systemFmeca);

  const { fmecaHeader } = useAppSelector((state: any) => state.systemFmeca);

  const { fmecaNotes } = useAppSelector((state: any) => state.systemFmeca);



  const [rowData, setRowData] = useState<any>(null);

  const [fmecaHeaderValues, setFmecaHeaderValues] = useState<any>({});

  const [alertMessage, setAlertMessage] = useState("");

  const [showAlert, setShowAlert] = useState(false);

  const [alertDeleteMessage, setAlertDeleteMessage] = useState("");

  const [rowNodeValue, setRowNodeValue] = useState("");

  const [showDeleteAlert, setShowDeleteAlert] = useState(false);

  const [formDataDelete, setFormDataDelete] = useState<any>({});

  const [gridApi, setGridApi] = useState(null);

  const [showModal, setShowModal] = useState(false);

  const [formData, setFormData] = useState<any>({

    potentialFailureMode: "",

    potentialCausesofFailureMode: "",

    effectsofFailure: "",

    causeType: "",

    recommendedCorrectiveActions: "",

    manufacturingControl: "",

    actionItem: "",

    actionStatus: "",

    actionTaken: "",

    commitDate: "",

    actionOwner: "",

    currentRankingSeverity: "",

    currentRankingOccurrence: "",

    currentRankingCriticality: "",

    revisedRankingSeverity: "",

    revisedRankingOccurrence: "",

    revisedRankingCriticality: "",

    attachments: [],

    isDataUpdated: false,

  });

  const [headerFmecaNotes, setHeaderFmecaNotes] = useState<any>([]);

  const [ipAttachments, setIpAttachments] = useState([]);



  useEffect(() => {

    if (fmecaNotes && fmecaNotes.length > 0) {

      setHeaderFmecaNotes(fmecaNotes);

    }

  }, [fmecaNotes]);



  useEffect(() => {

    const data =

      partRiskData?.partRisk?.length > 0 &&

      JSON.parse(JSON.stringify(partRiskData?.partRisk));

    let newData =

      data?.length > 0

        ? data.map((element: any) => ({

          ...element,

          id: element.id === 0 ? uuid() : element.id,

        }))

        : [data].map((element: any) => ({

          ...element,

          id: element.id === 0 ? uuid() : element.id,

        }));

    setRowData(newData);

  }, [partRiskData]);



  const { loading } = useAppSelector((state: any) => state.systemFmeca);



  const modules = {

    toolbar: [

      ["bold", "italic", "underline", "strike", "link", "image", "blockquote"],

      [{ list: "ordered" }, { list: "bullet" }],

    ],

  };



  const { quill, quillRef } = useQuill({ modules });



  const colors: any = {

    Electrical: "#2163B1",

    Mechanical: "#FFE927",

    Chemical: "#FF922D",

    Radiation: "#7ECF16",

  };



  const colorsLabel: any = {

    0: "Select",

    1: "Electrical",

    2: "Mechanical",

    3: "Chemical",

    4: "Radiation",

  };



  const causeType = [

    "Select",

    "Electrical",

    "Mechanical",

    "Chemical",

    "Radiation",

  ];



  const causeTypeVal = [1, 2, 3, 4];



  const severityArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];



  const actionStatusObj: any = {

    0: "Select",

    1: "Open",

    2: "Complete",

    3: "Cancel",

  };



  const actionStatusArray = [1, 2, 3];

  const handleCloseAlert = () => {

    setShowAlert(false);

    setShowDeleteAlert(false);

    setIsModalShowState(false);

  };



  const actionStatusLabel = ["", "Open", "Complete", "Cancel"];



  // const handleCloseAlert = () => {

  //            setShowAlert(false);

  //            setShowDeleteAlert(false);

  // };



  const handleClose = () => {

    setShowModal(false);

    setFormData({});

  };



  const addRow = (e: any, params: any) => {

    e.preventDefault();

    let gridDataList = [...gridRef?.current?.props?.rowData];

    let { data, rowIndex } = params;

    // if (validationRow(data)) {

    let newDataItem = {

      id: uuid(),

      sequenceId: gridDataList?.length + 1,

      referenceFMECAID: referenceID,

      parentBOMLevel: data?.parentBOMLevel,

      parentPartNumber: data?.parentPartNumber,

      parentPartDescription: data?.parentPartDescription,

      partNumber: data?.partNumber,

      partDescription: data?.partDescription,

      partFunction: data?.partFunction,

      isDelete: false,

      referencePartID: data?.referencePartID || 0,

      currentRankingDetectability: data?.currentRankingDetectability || 0,

      revisedRankingDetectability: data?.revisedRankingDetectability || 0,

      dynamicColumn1: "string",

      dynamicColumn2: "string",

      dynamicColumn3: "string",

      dynamicColumn4: "string",

      dynamicColumn5: "string",

      hazardType: data?.hazardType || 0,

    };

    gridDataList.splice(rowIndex + 1, 0, newDataItem);

    setRowData(gridDataList);

    // }

  };



  const handleEditPartRisk = (data: any, rowIndex: any) => {

    setShowModal(true);

    setFormData(data);

    setRowNodeValue(rowIndex);

  };



  const handleUpdatePartRisk = (params: any, rowNode: any) => {

    let newRowData = [...rowData];

    let payload = params;

    let index = newRowData.findIndex((element) => element.id === formData.id);

    if (typeof params.id === "number") {

      payload["isDataUpdated"] = true;

    }

    newRowData[index] = payload;

    setRowData(newRowData);

  };



  const handleDeleteRow = () => {

    let newRowData = [...rowData];

    let index = newRowData.findIndex(

      (element) => element.id === formDataDelete.id

    );

    const isDeleteFromDb = typeof formDataDelete.id === "number";

    if (isDeleteFromDb) {

      const deleteObj: any = {

        id: formDataDelete.id,

        isDelete: true,

      };

      dispatch(deletePartRiskFromDb(deleteObj));

      newRowData.splice(index, 1);

    } else {

      newRowData.splice(index, 1);

    }

    setRowData(newRowData);

    setShowDeleteAlert(false);

  };



  const handleDeleteRisk = (params: any) => {

    setAlertDeleteMessage("Are you sure you want to delete this part risk?");

    setShowDeleteAlert(true);

    setFormDataDelete(params.data);

  };



  const colorCellRenderer = (params: any) => {

    if (

      params.data.causeType &&

      params.data.causeType !== "" &&

      params.data.causeType !== 0

    ) {

      let res = colors[colorsLabel[params.data.causeType]];

      return (

        <span

                                                                           style= {{

        borderLeft: `15px solid ${colors[colorsLabel[params.data.causeType]]

          }`,

          paddingLeft: "5px",

                                                                           }
    }

                                                            >

      { causeType[params.data.causeType]}

      < /span>

                                             );

                              } else {

  return (

    <span

                                                                           style= {{

    borderLeft: `15px solid #ccc`,

      paddingLeft: "5px",

                                                                           }
}

                                                            >

  Select

  < /span>

                                             );

                              }

               };



const colorCellRendererList = (props: any) => {

  if (props.value !== "" && props.value !== 0) {

    return (

      <span

                                                                           style= {{

      borderLeft: `15px solid ${colors[colorsLabel[props.value]]}`,

        paddingLeft: "5px",

                                                                           }
  }

                                                            >

    { causeType[props.value]}

    < /span>

                                             );

                              }

               };



const actionStatusRenderer = (params: any) => {

  if (typeof params.data.actionStatus === "number") {

    return <span>{ actionStatusObj[params.data.actionStatus]} < /span>;

  } else {

    return <span>Select < /span>;

  }

};



const actionStatusRendererList = (props: any) => {

  if (props.value !== "" && props.value !== 0) {

    return <span>{ actionStatusObj[props.value]} < /span>;

  }

};



const ActionRenderer = ({

  data,

  handleEditPartRisk,

  rowIndex,

  rowData,

  api,

  node,

}: any) => {

  return (

    <div className= {`d-flex justify-content-between`
}>

  <button

                                                                           className="validate-btn"

type = "button"

onClick = {() => {

  validateExistingRisks(data, rowData, api, node);

}}

disabled = {!data.isRiskSummaryGrid ? true : false}

                                                            >

  Validate

  < /button>

  < span

className = "mr-3"

onClick = {() => {

  handleEditPartRisk(data, rowIndex);

}}

                                                            >

  <img

                                                                                          src="../../assets/images/edit-icon.svg"

className = ""

alt = "Edit"

style = {{ cursor: "pointer" }}

/>

  < /span>

  < /div>

                              );

               };



// const onInputOwnerData = (controlValue: string) => {

//   if (controlValue.length >= 3) {

//     GET(

//       `/GetExternalServiceData?controlName=AD_USER&controlValue=${controlValue}`

//     ).then((result: any) => {

//       let list: any = [];

//       result.data.forEach((item: any) => {

//         list.push({ value: item.key, label: item.value });

//       });



//       setOwnerData(list);

//     });

//   }

// };



const criticalityTrigger =

  (fmecaHeader &&

    fmecaHeader?.criticalityTrigger !== null &&

    fmecaHeader?.criticalityTrigger) ||

  20;



const currentCriticalityField = (params: any) => {

  params.data.currentRankingCriticality =

    params.data.currentRankingSeverity * params.data.currentRankingOccurrence;



  if (params.data.currentRankingCriticality) {

    return (

      <div

                                                                           style= {

        params.data.isRiskSummaryGrid

          ? {

            backgroundColor: "orange",

            color: "white",

            border: "1px solid #fff",

            textAlign: "center",

          }

          : params.data.currentRankingCriticality > criticalityTrigger

            ? {

              backgroundColor: "#d73c45",

              color: "white",

              border: "1px solid #fff",

              textAlign: "center",

            }

            : {

              backgroundColor: "#1976d2",

              color: "white",

              border: "1px solid #fff",

              textAlign: "center",

            }

      }

      >

      {
        params.data.currentRankingSeverity *

          params.data.currentRankingOccurrence
      }

      < /div>

                                             );

                              } else {

  return null;

}

               };



const revisedCriticalityField = (params: any) => {

  params.data.revisedRankingCriticality =

    params.data.revisedRankingSeverity * params.data.revisedRankingOccurrence;



  if (params.data.revisedRankingCriticality) {

    return (

      <div

                                                                           style= {

        params.data.isRiskSummaryGrid

          ? {

            backgroundColor: "orange",

            color: "white",

            border: "1px solid #fff",

            textAlign: "center",

          }

          : params.data.revisedRankingCriticality > criticalityTrigger

            ? {

              backgroundColor: "#d73c45",

              color: "white",

              border: "1px solid #fff",

              textAlign: "center",

            }

            : {

              backgroundColor: "#1976d2",

              color: "white",

              border: "1px solid #fff",

              textAlign: "center",

            }

      }

      >

      {
        params.data.revisedRankingSeverity *

          params.data.revisedRankingOccurrence
      }

      < /div>

                                             );

                              } else {

  return null;

}

               };



const currentRankingSeverityRenderer = (params: any) => {

  if (params.data.currentRankingSeverity) {

    return <span>{ params.data.currentRankingSeverity } < /span>;

  } else {

    return <span>Select < /span>;

  }

};



const currentRankingOccurrenceRenderer = (params: any) => {

  if (params.data.currentRankingOccurrence) {

    return <span>{ params.data.currentRankingOccurrence } < /span>;

  } else {

    return <span>Select < /span>;

  }

};



const revisedRankingSeverityRenderer = (params: any) => {

  if (params.data.revisedRankingSeverity) {

    return <span>{ params.data.revisedRankingSeverity } < /span>;

  } else {

    return <span>Select < /span>;

  }

};



const revisedRankingOccurrenceRenderer = (params: any) => {

  if (params.data.revisedRankingOccurrence) {

    return <span>{ params.data.revisedRankingOccurrence } < /span>;

  } else {

    return <span>Select < /span>;

  }

};



const datePicker = (params: any) => {

  let dtToday = new Date();



  let month: any = dtToday.getMonth() + 1;

  let day: any = dtToday.getDate();

  let year = dtToday.getFullYear();

  if (month < 10) month = "0" + month.toString();

  if (day < 10) day = "0" + day.toString();



  var maxDate: any = year + "-" + month + "-" + day;



  const handleChange = (e: any) => {

    params.data.commitDate = new Date(e.target.value);

  };

  params.api.refreshCells();

  // if(params.data.commitDate.length !== 10){

  //   return (

  //     <span>{formatDate(params.data.commitDate)}</span>

  //   )

  // }else{

  return (

    <div>

    <input

                                                                           className= "px-2 border-0 border-white py-1"

  type = "date"

  onChange = { handleChange }

  min = { maxDate }

    />

    </div>

                              );

               };



window.onclick = function (event: any) {

  if (

    !event.target.matches(".user-notes") &&

    !event.target.matches(".user-details") &&

    !event.target.matches(".user-message") &&

    !event.target.matches(".quill-container") &&

    !event.target.matches(".ql-container") &&

    !event.target.matches(".ql-snow") &&

    !event.target.matches(".ql-editor") &&

    !event.target.matches("p")

  ) {

    quillRef.current.firstChild.innerHTML = "";

    setIsEditing(false);

    setNote({

      referenceID: "",

      description: "",

    });

    setCopiedNote({

      id: "",

      referenceID: "",

      description: "",

    });

  }

};

const navigate = useNavigate();

const [display, setDisplay] = useState<any>(true);

const [displayGrid, setDisplayGrid] = useState<any>(true);

const [files, setFiles] = useState<any>([]);

const [ipFiles, setIpFiles] = useState<any>([]);

const [fmecaNote, setFmecaNote] = useState<any>([]);

const [note, setNote] = useState<any>({

  id: "",

  referenceFMECAID: "",

  description: "",

});

const [copiedNote, setCopiedNote] = useState<any>({

  id: "",

  referereferenceFMECAID: "",

  description: "",

});

const [currentNote, setCurrentNote] = useState<any>({});

const [isEditing, setIsEditing] = useState<boolean>(false);

// const [attachments, setAttachments] = useState<any>([]);

const [gridAttachment, setGridAttachment] = useState<any>([]);

const gridRef = useRef<any>(null);



const saveGridCellValueToRedux = (params: any, values: any) => {

  let field = params.column.colId;

  let newRow = { ...params.data };

  if (field === "actionOwner") {

    newRow[field] = convertArrayToString(values);

  } else {

    newRow[field] = values;

  }

  if (typeof params.data.id === "number") {

    newRow["isDataUpdated"] = true;

  }

  let gridDataList = [...gridRef?.current?.props?.rowData];

  let index = gridDataList.findIndex(

    (element) => element.id === params.data.id

  );

  gridDataList[index] = newRow;

  setRowData(gridDataList);

  return false;

};



const valueSetterToRedux = (params: any) => {

  saveGridCellValueToRedux(params, params.newValue);

};



const [showGenerateModal, setShowGenerateModal] = useState<boolean>(false);



const [criticalRisk, setCriticalRisk] = useState(null);

const [isLoding, setIsLoding] = useState<boolean>(false);



const attachmentField = (params: any) => {

  const handleChangeAttachments = (e: any, params: any) => {

    const fileObj: any = [];

    const fileArray: any = [];

    fileObj.push(e.target.files);

    for (let i = 0; i < fileObj[0].length; i++) {

      fileArray.push(fileObj[0][i].name);

    }



    setGridAttachment([...gridAttachment, ...fileArray]);



    let data = [...params.data.attachments];

    data = [...data, ...fileArray];

    saveGridCellValueToRedux(params, data);

  };



  const getFieldFilterData = (items?: any[], data?: any) => {

    let returnData: any[] = [];

    items?.forEach((value: any) => {

      const filtered = data.find((val: any) => val.value === value);

      returnData.push(filtered);

    });



    return returnData;

  };



  return (

    <div className= "d-flex justify-content-center" >

    <a href="#" className = "grid-attachment choose_file mr-2" >

      <RiAttachmentFill fontSize={ 20 } />

        < input

  type = "file"

  name = "file"

  onChange = {(e: any) => {

  handleChangeAttachments(e, params);

}}

multiple

  />

  </a>

  < a href = "#" >

    <PopupCellRenderer params={ params } />

      < /a>

      < /div>

                              );

               };



const headerLabelComponent = (params: any) => {

  return (

    <div className= "grid-header-label" >

    <span className="required" > </span>

  { params.displayName }

  </div>

                              );

               };



const validateExistingRisks = (

  params: any,

  rowData: any,

  api: any,

  node: any

) => {

  const allRowData = [...gridRef?.current?.props?.rowData];

  const index = allRowData.findIndex((value: any) => {

    return value.id === params.id;

  });



  allRowData[index].isRiskSummaryGrid = false;



  setRowData(allRowData);

  api.refreshCells({

    force: true,

    rowNodes: [node],

  });

};



const [columnDefs] = useState<any>([

  {

    headerName: "Add/Remove Risk",

    maxWidth: 119,

    suppressMenu: true,

    wrapHeaderText: true,

    autoHeaderHeight: true,

    editable: false,

    cellRendererFramework: (params: any) => {

      return (

        <div className= "d-flex justify-content-evenly align-items-center" >

        <a className="" href = "#" onClick = {(e: any) => addRow(e, params)}>

          <img

                                                                                                                        src="../../../assets/images/add-part-icon.svg"

width = "18"

className = "mx-auto"

alt = "Add Part"

  />

  </a>

  < a

style = {{ width: "20px" }}

href = "#"

onClick = {() => {

  handleDeleteRisk(params);

}}

                                                                                          >

  <img

                                                                                                                        src="../../assets/images/substract-circle.svg"

alt = "Delete"

  />

  </a>

  < /div>

                                                            );

                                             },

                              },

{

  headerName: "Item ID",

    field: "itemId",

      editable: false,

        minWidth: 110,

          wrapHeaderText: true,

            autoHeaderHeight: true,

                              },

{

  headerName: "BOM Level",

    field: "parentBOMLevel",

      editable: false,

        minWidth: 130,

                              },

{

  headerName: "Parent Part #",

    field: "parentPartNumber",

      editable: false,

        minWidth: 145,

                              },

{

  headerName: "Parent Part Description",

    field: "parentPartDescription",

      editable: false,

        minWidth: 240,

                              },

{

  headerName: "Part #",

    field: "partNumber",

      editable: false,

        minWidth: 120,

                              },

{

  headerName: "Part Description",

    field: "partDescription",

      minWidth: 250,

        editable: false,

                              },

{

  headerName: "Part Function",

    field: "partFunction",

      editable: true,

        minWidth: 200,

          valueSetter: valueSetterToRedux,

                              },

{

  headerName: "Attachments",

    field: "attachments",

      cellRendererFramework: AttachmentRenderer,

        cellRendererParams: {

    recordType: "parts",

      setShowAttachmentModal,

      showAttachmentModal,

      setAttachmentParams,

      referenceID,

                                             },

  minWidth: 144,

    editable: false,

                              },

{

  headerName: "Potential Failure Mode",

    field: "potentialFailureMode",

      minWidth: 206,

        cellEditor: "agLargeTextCellEditor",

          cellEditorPopup: false,

            cellStyle: (params: any) => {

              if (params.data.causeType !== "" && params.data.causeType !== 0) {

                return {

                  backgroundColor: colors[causeType[params.data.causeType]],

                  color:

                    params.data.causeType === 0 || params.data.causeType === 2

                      ? "#000"

                      : "#444444",

                  margin: "3px",

                  lineHeight: "25px",

                  height: "25px",

                };

              }

            },

              valueSetter: valueSetterToRedux,

                              },

{

  headerName: "Effects of Failure",

    field: "effectsofFailure",

      minWidth: 167,

        wrapHeaderText: true,

          autoHeaderHeight: true,

            cellEditor: "agLargeTextCellEditor",

              cellEditorPopup: false,

                cellStyle: (params: any) => {

                  if (params.data.causeType !== "") {

                    return {

                      backgroundColor: colors[causeType[params.data.causeType]],

                      color:

                        params.data.causeType === 0 || params.data.causeType === 2

                          ? "#000"

                          : "#444444",

                      margin: "3px",

                      lineHeight: "25px",

                      height: "25px",

                      marginLeft: "5px",

                    };

                  }

                },

                  valueSetter: valueSetterToRedux,

                              },

{

  headerName: "Potential Cause of Failure Mode",

    field: "potentialCausesofFailureMode",

      minWidth: 265,

        cellEditor: "agLargeTextCellEditor",

          cellEditorPopup: false,

            cellStyle: (params: any) => {

              if (params.data.causeType !== "") {

                return {

                  backgroundColor: colors[causeType[params.data.causeType]],

                  color:

                    params.data.causeType === 0 || params.data.causeType === 2

                      ? "#000"

                      : "#444444",

                  margin: "3px",

                  lineHeight: "25px",

                  height: "25px",

                  marginLeft: "8px",

                };

              }

            },

              valueSetter: valueSetterToRedux,

                              },

{

  headerName: "Cause Type",

    field: "causeType",

      minWidth: 140,

        cellEditor: "agRichSelectCellEditor",

          cellEditorPopup: true,

            cellRenderer: colorCellRenderer,

              editable: true,

                cellEditorParams: {

    values: causeTypeVal,

      cellRenderer: colorCellRendererList,

                                             },

  valueSetter: valueSetterToRedux,

                              },

{

  headerName: "Manufacturing Control",

    field: "manufacturingControl",

      minWidth: 230,

        valueSetter: valueSetterToRedux,

                              },

{

  headerName: "Current Ranking",

    headerClass: "group-header-separator",

      children: [

        {

          headerName: "Severity (S)",

          field: "currentRankingSeverity",

          minWidth: 135,

          cellRenderer: currentRankingSeverityRenderer,

          cellEditor: "agSelectCellEditor",

          cellEditorParams: { values: severityArray },

          valueSetter: valueSetterToRedux,

        },

        {

          headerName: "Occurrence (O)",

          field: "currentRankingOccurrence",

          minWidth: 155,

          cellRenderer: currentRankingOccurrenceRenderer,

          cellEditor: "agSelectCellEditor",

          cellEditorParams: { values: severityArray },

          valueSetter: valueSetterToRedux,

        },

        {

          headerName: "Criticality (SO)",

          field: "currentRankingCriticality",

          minWidth: 155,

          cellRendererFramework: currentCriticalityField,

          editable: false,

          valueSetter: valueSetterToRedux,

        },

      ],

                              },

{

  headerName: "Recommended Corrective Actions",

    field: "recommendedCorrectiveActions",

      minWidth: 277,

        valueSetter: valueSetterToRedux,

                              },

{

  headerName: "Action Attachments",

    field: "actionAttachments",

      cellRendererFramework: AttachmentRenderer,

        cellRendererParams: {

    recordType: "part-risk",

      setShowAttachmentModal,

      showAttachmentModal,

      setAttachmentParams,

      referenceID,

                                             },

  minWidth: 186,

    editable: false,

                              },

{

  headerName: "Action Item",

    field: "actionItem",

      minWidth: 135,

        valueSetter: valueSetterToRedux,

                              },

{

  headerName: "Action Owner",

    field: "actionOwner",

      minWidth: 180,

        cellEditor: AutocompleteSelectCellEditor,

          cellEditorParams: {

    autocomplete: {

      fetch: (cellEditor: any, text: any, update: any) => {

        let match =

          text.toLowerCase() || cellEditor.eInput.value.toLowerCase();



        let xmlHttp = new XMLHttpRequest();

        xmlHttp.onreadystatechange = () => {

          if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {

            let data = JSON.parse(xmlHttp.responseText);



            let items = data.map((d: any) => ({

              value: d.key,

              label: d.value,

            }));



            if (data.length === 0) {

              cellEditor.eInput.value = text;

            } else {

              update(items);

            }

          }

          if (xmlHttp.status === 404) {

            update(false);

          }

        };

        xmlHttp.open(

          "GET",

          `${baseUrl}/GetExternalServiceData?controlName=AD_USER&controlValue=${match}`,

          true

        );

        let userToken = sessionStorage.getItem("access_token");



        xmlHttp.setRequestHeader("Authorization", `Bearer ${userToken}`);

        xmlHttp.setRequestHeader("Access-Control-Allow-Origin", "*");

        xmlHttp.send(null);

      },

                                                            },



    placeholder: "Select an option",

                                             },

  // editable: (params: any) => {

  //            return params.data.parentPartNumber !== params.data.partNumber;

  // },

  valueFormatter: (params: any) => {

    if (params.value) {

      let obj = convertToObject(params.value);



      return obj.label;

    }

    return "";

  },

    valueSetter: (params: any) => {

      saveGridCellValueToRedux(params, params.newValue);

    },

                              },

{

  headerName: "Commit Date",

    field: "commitDate",

      //   cellRenderer: commitDateRenderer,

      // suppressMenu: true,

      cellEditor: datePicker,

        minWidth: 145,

          valueFormatter: (params: any) => {

            if (params.value) {

              return formatDate(params.value);

            }

          },

            valueSetter: valueSetterToRedux,

                              },

{

  headerName: "Revised Ranking",

    headerClass: "group-header-separator",

      children: [

        {

          headerName: "Severity (S)",

          field: "revisedRankingSeverity",

          minWidth: 142,

          cellRenderer: revisedRankingSeverityRenderer,

          cellEditor: "agSelectCellEditor",

          cellEditorParams: { values: severityArray },

          valueSetter: valueSetterToRedux,

        },

        {

          headerName: "Occurrence (O)",

          field: "revisedRankingOccurrence",

          minWidth: 155,

          cellRenderer: revisedRankingOccurrenceRenderer,

          cellEditor: "agSelectCellEditor",

          cellEditorParams: { values: severityArray },

          valueSetter: valueSetterToRedux,

        },

        {

          headerName: "Revised Criticality (SO)",

          field: "revisedRankingCriticality",

          minWidth: 205,

          editable: false,

          cellRendererFramework: revisedCriticalityField,

          valueSetter: valueSetterToRedux,

        },

      ],

                              },

{

  headerName: "Action Taken",

    field: "actionTaken",

      minWidth: 145,

        cellEditor: "agLargeTextCellEditor",

          cellEditorPopup: true,

            valueSetter: valueSetterToRedux,

                              },

{

  headerName: "Action Status",

    field: "actionStatus",

      minWidth: 145,

        cellEditor: "agRichSelectCellEditor",

          cellEditorPopup: true,

            cellRenderer: actionStatusRenderer,

              cellEditorParams: {

    values: actionStatusArray,

      cellRenderer: actionStatusRendererList,

                                             },

  valueSetter: valueSetterToRedux,

                              },

{

  headerName: "Action",

    maxWidth: 100,

      pinningRight: true,

        pinned: "right",

          suppressMenu: true,

            filter: false,

              editable: false,

                cellRendererFramework: ActionRenderer,

                  cellRendererParams: {

    handleEditPartRisk,

                                             },

  valueSetter: valueSetterToRedux,

                              },

               ]);



const sampleNewInitiateData = {

  role: ADMIN,

  status: 0,

  originator: "Test User",

  originationDate: new Date(),

};



const {

  getADUsers,

  adUserData,

  projectNameData,

  relatedPartsData,

  onInputRelatedPartsData,

} = useFetch();



const initialValues: FormValues = {

  status:

    fmecaHeader !== null && fmecaHeader.status !== "" && fmecaHeader.status,

  projectName:

    (fmecaHeader !== null && convertToObject(fmecaHeader.projectName)) || "",

  projectID: (fmecaHeader !== null && fmecaHeader.projectID) || "",

  projectDescription:

    (fmecaHeader !== null && fmecaHeader.projectDescription) || "",

  PDPProjectName: (fmecaHeader !== null && fmecaHeader.pdpProjectName) || "",

  topLevelPartNumber:

    (fmecaHeader !== null &&

      convertToObject(fmecaHeader.topLevelPartNumber)) ||

    "",

  topLevelPartDescription:

    (fmecaHeader !== null && fmecaHeader.topLevelPartDescription) || "",

  partRevision:

    (fmecaHeader !== null && convertToObject(fmecaHeader.partRevision)) || "",

  previousRelatedParts:

    (fmecaHeader !== null &&

      extractKeyValue(fmecaHeader.previousRelatedParts)) ||

    "",

  designEngineer:

    (fmecaHeader !== null && extractKeyValue(fmecaHeader.designEngineer)) ||

    "",

  projectOwner:

    (fmecaHeader !== null && convertToObject(fmecaHeader.projectOwner)) || "",

  projectTeam:

    (fmecaHeader !== null && extractKeyValue(fmecaHeader.projectTeam)) || "",

  criticalityTrigger:

    (fmecaHeader !== null &&

      fmecaHeader !== "" &&

      fmecaHeader.criticalityTrigger) ||

    20,

  businessUnit:

    (fmecaHeader !== null && extractKeyValue(fmecaHeader.businessUnit)) || "",

  platform:

    (fmecaHeader !== null && extractKeyValue(fmecaHeader.platform)) || "",

  processOwner: "",

  processRevision: "",

  supplierName: "",

  supplierSite: "",

  fmecaNumber: (fmecaHeader !== null && fmecaHeader.fmecaNumber) || "",

};



const validationSchema = Yup.object({});



const onSubmit = () => { };



React.useEffect(() => {

  if (quill) {

    quill.on("text-change", () => {

      if (isEditing) {

        handleNoteEditChange(quillRef.current.firstChild.innerHTML);

      }

      if (isEditing === false) {

        handleNoteChange(quillRef.current.firstChild.innerHTML);

      }

    });

  }

}, [quill]);



const onHandleChange = (e: any, partNumber: any) => {

  const fileObj: any = [];

  const fileArray: any = [];

  fileObj.push(e.target.files);

  const customDataObj = {

    referenceFMECAID: referenceID,

    partNumber: partNumber,

  };

  uploadFiles(customDataObj, fileObj, "parts");

  for (let i = 0; i < fileObj[0].length; i++) {

    fileArray.push(fileObj[0][i].name);

  }



  setFiles([...files, ...fileArray]);

};



const onHandleChangeIP = (e: any, partNumber: any) => {

  const fileObj: any = [];

  const fileArray: any = [];

  fileObj.push(e.target.files);



  const customDataObj = {

    referenceFMECAID: referenceID,

    partNumber: partNumber,

  };



  uploadFiles(customDataObj, fileObj, "ip");

  for (let i = 0; i < fileObj[0].length; i++) {

    fileArray.push(fileObj[0][i].name);

  }



  setIpFiles([...files, ...fileArray]);

};



function handleNoteChange(value: any) {

  if (!isEditing) {

    let obj = {

      referenceFMECAID: referenceID,

      description: value,

    };

    setNote(obj);

  }

}



function handleNoteEditChange(value: any) {

  setNote({ ...note, description: value });

  // let obj = {

  //   id: crypto.randomUUID(),

  //   name: sampleNewInitiateData.originator,

  //   date: formatDate(sampleNewInitiateData.originationDate),

  //   message: value,

  // };

  // setNote(obj);

}



const onAddClicked = () => {

  dispatch(createFMECANotes(note));

  dispatch(getFMECANotesByFMECAID(referenceID));



  setNote({

    referenceFMECAID: "",

    description: "",

  });

  quillRef.current.firstChild.innerHTML = "";

};



const onEditClicked = () => {

  let obj: any = {

    id: note.id,

    referenceFMECAID: note.referenceFMECAID,

    description: note.description,

  };



  dispatch(updateFMECANotes(obj));

  dispatch(getFMECANotesByFMECAID(referenceID));



  const updatedNote = fmecaNote.map((note: any) => {

    return note.id === obj.id ? obj : note;

  });



  setIsEditing(false);

  setFmecaNote(updatedNote);

  setNote({});

  quillRef.current.firstChild.innerHTML = "";

};



const copySelectedNote = (noteData: any) => {

  setIsEditing(true);

  setCopiedNote(noteData);

  setNote(noteData);



  quillRef.current.firstChild.innerHTML = noteData.description;

};



const onGridReady = (params: any) => {

  setGridApi(params);

};



const rowSelectionType = "multiple";



const onCellValueChanged = (params: any) => {

  if (params.column.colId === "causeType") {
    params.api.refreshCells({
      force: true,
      rowNodes: [params.node],
    });
  }
  if (params.column.colId === "currentRankingSeverity") {
    params.api.refreshCells({
      force: true,
      rowNodes: [params.node],
    });
  }
  if (params.column.colId === "currentRankingOccurrence") {
    params.api.refreshCells({
      force: true,
      rowNodes: [params.node],
    });
  }
  if (params.column.colId === "revisedRankingSeverity") {
    params.api.refreshCells({
      force: true,
      rowNodes: [params.node],
    });
  }



  if (params.column.colId === "revisedRankingOccurrence") {

    params.api.refreshCells({

      force: true,

      rowNodes: [params.node],

    });

  }

};



//   let {updateFmecaHeader} = useAppSelector((state: any) => state.updateFmecaHeader);



//   useEffect(() => {

//         if(updateFmecaHeader){

//                            dispatch(getFMECAHeaderByFMECAID(updateFmecaHeader))

//                           }

//   },[updateFmecaHeader]);



const saveGridDataToDatabase = async () => {

  setIsModalShowState(true);

  if (fmecaHeaderValues) {

    const {

      status,

      projectTeam,

      designEngineer,

      projectOwner,

      rpnTrigger,

      spnTrigger,

      processOwner,

      processRevision,

      supplierName,

      supplierSite,

      criticalityTrigger,

      fmecaNumber,

    } = fmecaHeaderValues;



    let splitFmecaNumber = fmecaNumber.split("-");



    let fmecaNumberFormat = Number(splitFmecaNumber[1]);



    let savedValues = {

      id: fmecaNumberFormat,

      status: status,

      projectTeam: convertArrayToString(projectTeam),

      designEngineer: convertArrayToString(designEngineer),

      projectOwner: convertArrayToString(projectOwner),

      rpnTrigger: rpnTrigger,

      spnTrigger: spnTrigger,

      criticalityTrigger: criticalityTrigger,

      processOwner: "string",

      processRevision: "string",

      supplierName: "string",

      supplierSite: "string",

    };



    await dispatch(updateFMECAHeader(savedValues));

  }



  // const isValid = rowData.every((value: any) => {

  //   return (

  //     value.currentRankingSeverity &&

  //     value.currentRankingOccurrence &&

  //     value.revisedRankingSeverity &&

  //     value.revisedRankingOccurrence

  //   )

  // });



  // if (isValid) {

  let newData = rowData.map(

    ({

      parentBOMLevel,

      parentPartNumber,

      parentPartDescription,

      partNumber,

      partDescription,

      currentRankingCriticality,

      revisedRankingCriticality,

      actionItem,

      sequenceId,

      ...item

    }: any) => item

  );



  newData.forEach((item: any) => {

    if (!item.isCriticalRisk) {

      return (item.isCriticalRisk =

        item.currentRankingSeverity * item.currentRankingOccurrence >

        criticalityTrigger ||

        item.revisedRankingSeverity * item.revisedRankingOccurrence >

        criticalityTrigger);

    }

  });



  const newInsertedData = newData.filter(

    (value: any) => typeof value.id === "string"

  );

  newInsertedData.forEach(function (v: any) {

    delete v.id;

  });



  const updatedData = newData.filter((value: any) => value.isDataUpdated);

  updatedData.forEach(function (v: any) {

    delete v.isDataUpdated;

  });



  if (newInsertedData.length > 0) {

    await dispatch(createPartRisk(newInsertedData));

  }



  if (updatedData.length > 0) {

    await dispatch(updatePartRisk(updatedData));

  }

  // } else {

  //            setAlertMessage(

  //                           "Parent Part Number/Parent Part Description/Parent BOM Level/Part Number/Part Description/ActionOwner/ActionTaken cannot be empty"

  //            );

  //            setShowAlert(true);

  // }

};

const { isModalShow, isError, errors } = useAppSelector(

  (state: any) => state.systemFmeca

);



const handleSubmitCopy = () => {

  setIsLoding(true);

  http

    .get(`${apiUrl.GET_FMECA_COPY}/${referenceID}`)

    .then((data) => {

      if (data.status === 200) {

        setIsLoding(false);

        navigate(`/initiate-fmeca/${fmecaType}`, {

          state: { isCopy: true, copyData: data?.data },

        });

      }

    })

    .catch((e) => {

      setIsLoding(false);

      if (e?.response?.data?.StatusCode === 500) {

        setAlertMessage(e?.response?.data?.ErrorMessage);

      } else {

        setAlertMessage("Something went wrong please try again.");

      }

      setShowAlert(true);

    });

};



const closeGenerateModal = () => {

  setShowGenerateModal(false);

  setCriticalRisk(null);

};

const openGenerateModal = () => {

  setShowGenerateModal(true);

};

const handleCriticalRisk = (type: any) => {

  setCriticalRisk(type);

};



const handleGenerate = () => {

  setIsLoding(true);

  setShowGenerateModal(false);

  let isCriticalRisk = criticalRisk;

  http

    .get(

      `${apiUrl.GET_FMECA_GENERATE}/${referenceID}/${isCriticalRisk}/${fmecaType}`

    )

    .then((data) => {

      setIsLoding(false);

      if (data.status === 200) {

        navigate(`/initiate-fmeca/${fmecaType}`, {

          state: { isCopy: false, copyData: data?.data },

        });

      }

    })

    .catch((e) => {

      if (e?.response?.data?.StatusCode === 500) {

        setAlertMessage(e?.response?.data?.ErrorMessage);

      } else {

        setAlertMessage("Something went wrong please try again.");

      }

      setIsLoding(false);

      setShowAlert(true);

    });

};



const [showSummaryModal, setShowSummaryModal] = useState(false);

const [mainGridData, setMainGridData] = useState({});



const [isModalShowState, setIsModalShowState] = useState(false);

const closeSummaryModal = () => {

  setShowSummaryModal(false);

  setMainGridData({});

};



const getContextMenu = (params: any) => {

  if (params.column.colId === "partNumber" && params.value) {

    let result = [

      {

        name: "View Existing Risk For Parts",

        action: (data: any) => {

          setShowSummaryModal(true);

          setMainGridData(params);

        },

      },

    ];

    return result;

  }

};

const grouped = rowData?.reduce(function (r: any, a: any, i: any) {

  if (!i || r[r?.length - 1][0]?.partNumber !== a?.partNumber) {

    return r?.concat([[a]]);

  }

  r[r.length - 1]?.push(a);

  return r;

}, []);



const newArr = grouped?.map((p: any, index: any) => {

  return p?.map((c: any, subIndex: any) => {

    return {

      ...c,

      itemId: `${index + 1}.${subIndex + 1}`,

      actionItem: subIndex + 1,

    };

  });

});

const newRowDataArr = rowData?.length !== 0 ? newArr?.flat(1) : [];



console.log("loading", loading);

return (

  <>

  { isLoding || (loading && <Loader />)}

    < div className = "container-fluid" >

      <div className="row mb-4 status-header" >

        <div className="col" >

          <div className="d-flex justify-content-between  align-items-center" >

            <div className="d-flex align-items-center" >

              <BreadCrumb />

              < StatusBar

CurrentStatus = { fmecaHeader?.status || 0}

StatusList = { []}

  />

  </div>

  < Tab selectedStep = { 3} fmecaType = { fmecaType } id = { referenceID } />

    </div>

    < /div>

    < /div>

    < /div>



    < Formik

enableReinitialize = { true}

initialValues = { initialValues }

validationSchema = { validationSchema }

onSubmit = { onSubmit }

  >

  {({

    values,

    errors,

    touched,

    handleChange,

    handleSubmit,

    isSubmitting,

    setFieldValue,

    setFieldTouched,

  }: any) => {

  setFmecaHeaderValues(values);

  return (

    <>

    <div className= "btn-container" >

    <button

                                                                                                                                       type="submit"

  className = "amat-btn amat-btn-sm amat-btn-secondary text-uppercase"

  onClick = { saveGridDataToDatabase }

    >

    <img src="../../../assets/images/save.svg" alt = "Save" />

      Save

      < /button>



      < button

  type = "button"

  className = "amat-btn amat-btn-sm amat-btn-secondary text-uppercase"

  onClick = { handleSubmitCopy }

    // disabled={isSubmitting}

    >

    {/* <img src="../../../assets/images/save.svg" alt="Save" /> */ }

    < IoMdCopy className = "icon-style" />

      Copy

      < /button>



      < button

  type = "button"

  className = "amat-btn amat-btn-sm amat-btn-secondary text-uppercase"

  onClick = { openGenerateModal }

    >

    {/* <img src="../../../assets/images/save.svg" alt="Save" /> */ }

    < TbSettings className = "icon-style" />

      Generate Design FMECA

        < /button>



        < button

  className = "amat-btn amat-btn-sm amat-btn-light text-uppercase"

  type = "button"

    // onClick={() => redirect("/Dashboard")}

    >

    <a

                                                                                                                                                      href="/"

  className = "d-flex align-items-center"

  style = {{ textDecoration: "none", color: "grey" }
}

                                                                                                                                       >

  <img

                                                                                                                                                                     className="imgsrd"

src = "../../assets/images/close-grey.svg"

alt = "Exit"

  />

  Close

  < /a>

  < /button>

  < /div>



  < div

className = "accordian-bar-system"

onClick = {() => setDisplay(!display)}

                                                                                                         >

  {
    display?(

                                                                                                                                       <span className = "arrow-icon" > </span>

    ): (

        <span className = "arrow-icon-down"></ span >

                                                                                                                        )}

<span>Header Information < /span>

  < /div>



  < div

className = {`main-container-fluid ${display ? "show" : "hide"}`}

                                                                                                         >

  <div className={ `container-fluid ${display ? "show" : "hide"}` }>

    <div className="section" >

      <div className="row mb-4" >

        <div className="col-lg-3" >

          <div className="add-flex-row" >

            <span className="label" > FMECA Type < /span>

              < span className = "field-value" >

                { " "}

{
  fmecaHeader !== null &&

  FMECATypeLabels[fmecaHeader.fmecaType]
}

</span>

  < /div>

  < /div>



  < div className = "col-lg-3" >

    <div className="add-flex-row" >

      <span className="label" > FMECA Number < /span>

        < span className = "field-value" >

          { fmecaHeader !== null && fmecaHeader.fmecaNumber}

</span>

  < /div>

  < /div>



  < div className = "col-lg-3" >

    <div className="add-flex-row" >

      <label className="label" htmlFor = "startDate" >

        Start Date

          < /label>



          < span className = "field-value" >

            { fmecaHeader !== null &&

            formatDate(fmecaHeader.originationDate)}

</span>

  < /div>

  < /div>



  < div className = "col-lg-3" >

    <div className="add-flex-row" >

      <label className="label" htmlFor = "lastChangedDate" >

        Last Changed Date

          < /label>



          < span className = "field-value" >

            { fmecaHeader !== null &&

            formatDate(fmecaHeader.updatedDate)}

</span>

  < /div>

  < /div>

  < /div>



  < div className = "row mb-4" >

    <div className="col-12" >

      <div style={ { position: "relative", zIndex: 2 } }>

        <div className="row" >

          <div className="col-lg-3" >

            <div className="amat-form-group" >

              <label htmlFor="projectName" className = "" >

                Project Name

                  < /label>

                  < SelectField

name = "projectName"

selectedValue = { values.projectName }

data = { projectNameData }

rolesArr = { [PROJECT_TEAM, ACTION_OWNER]}

role = { sampleNewInitiateData.role }

touched = { touched.projectName }

errors = { errors.projectName }

setFieldValue = { setFieldValue }

setFieldTouched = { setFieldTouched }

// inputValue={searchProjectName}

flag = { true}

  />

  </div>

  < /div>



  < div className = "col-lg-3" >

    <div className="amat-form-group" >

      <label htmlFor="projectID" > Project ID < /label>

        < input

type = "text"

className = "amat-form-control bg-color"

id = "projectID"

name = "projectID"

readOnly

value = { values.projectID } //system generated

  />



  <div className="text" > </div>

    < /div>

    < /div>



    < div className = "col-lg-6" >

      <div className="amat-form-group add-flex" >

        <label htmlFor="description" className = "" >

          Project Description

            < /label>



            < div className = "bg-color" >

              <InputField

                                                                                                                                                                                                                                                                              name="projectDescription"

onChange = { handleChange }

maxLength = { 250}

selectedValue = { values.projectDescription }

role = { sampleNewInitiateData.role }

rolesArr = { [PROJECT_TEAM, ACTION_OWNER]}

// status={fmecaData.status}

// fmecaStatusEnum={FMECAStatus.Draft}

readOnly

  />

  </div>

  < /div>

  < /div>



  < div className = "col-lg-3" >

    <div className="amat-form-group add-flex" >

      <label

                                                                                                                                                                                                                                                               htmlFor="topLevelPartNumber"

className = ""

  >

  Part Number

    < /label>



    < SelectField

name = "topLevelPartNumber"

selectedValue = { values.topLevelPartNumber }

rolesArr = { [ACTION_OWNER]}

role = { sampleNewInitiateData.role }

touched = { touched.topLevelPartNumber }

errors = { errors.topLevelPartNumber }

setFieldValue = { setFieldValue }

setFieldTouched = { setFieldTouched }

flag = { true}

  />

  </div>

  < /div>



  < div className = "col-lg-3" >

    <div className="amat-form-group add-flex" >

      <label

                                                                                                                                                                                                                                                               htmlFor="topLevelPartDescription"

className = ""

  >

  Part Description

    < /label>



    < InputField

name = "topLevelPartDescription"

onChange = { handleChange }

// maxLength={5}

selectedValue = { values.topLevelPartDescription }

role = { sampleNewInitiateData.role }

rolesArr = { [ACTION_OWNER]}

readOnly

  />

  </div>

  < /div>



  < div className = "col-lg-3" >

    <div className="amat-form-group add-flex" >

      <label htmlFor="partRevision" className = "" >

        Rev #

          < /label>



          < SelectField

name = "partRevision"

selectedValue = { values.partRevision }

// data={partRevisionData}

rolesArr = { [PROJECT_TEAM, ACTION_OWNER]}

role = { sampleNewInitiateData.role }

touched = { touched.partRevision }

errors = { errors.partRevision }

setFieldValue = { setFieldValue }

setFieldTouched = { setFieldTouched }

flag = { true}

  />

  </div>

  < /div>



  < div className = "col-lg-3" >

    <div className="amat-form-group add-flex" >

      <label

                                                                                                                                                                                                                                                               htmlFor="previousRelatedParts"

className = ""

  >

  Previous / Related Parts

    < /label>



    < MultiSelect

name = "previousRelatedParts"

label = "Previous/Related Parts"

selectedValue = { values.previousRelatedParts }

data = { relatedPartsData }

rolesArr = { [PROJECT_TEAM, ACTION_OWNER]}

role = { sampleNewInitiateData.role }

touched = { touched.previousRelatedParts }

errors = { errors.previousRelatedParts }

setFieldValue = { setFieldValue }

setFieldTouched = { setFieldTouched }

flag = { true}

displayValue = { true}

  />

  </div>

  < /div>



  < div className = "col-lg-3" >

    <div className="amat-form-group add-flex" >

      <label htmlFor="status" > Status < /label>



{/* <div className="field-div"> */ }

<SelectField

                                                                                                                                                                                                                                                               name="status"

selectedValue = {
  statusData.filter(

    ({ value }: any) => value === values.status

  )
}

data = { statusData }

rolesArr = { [ACTION_OWNER]}

role = { sampleNewInitiateData.role }

touched = { touched.status }

errors = { errors.status }

setFieldValue = { setFieldValue }

setFieldTouched = { setFieldTouched }

onChange = {(option: any) => {

  setFieldValue(

    "status",

    option ? option.value : null

  );

}}

/>

{/* </div> */ }

</div>

  < /div>



  < div className = "col-lg-3" >

    <div className="amat-form-group" >

      <label htmlFor="PDPProjectName" >

        PDP Project Name

          < /label>



          < InputField

name = "PDPProjectName"

onChange = { handleChange }

maxLength = { 50}

selectedValue = { values.PDPProjectName }

role = { sampleNewInitiateData.role }

rolesArr = { [ACTION_OWNER]}

readOnly

  />

  </div>

  < /div>



  < div className = "col-lg-3" >

    <div className="amat-form-group add-flex" >

      <label htmlFor="businessUnit" className = "" >

        Business Unit

          < /label>



          < MultiSelect

name = "businessUnit"

selectedValue = { values.businessUnit }

// data={buData}

rolesArr = { [ACTION_OWNER]}

role = { sampleNewInitiateData.role }

touched = { touched.platform }

errors = { errors.platform }

setFieldValue = { setFieldValue }

setFieldTouched = { setFieldTouched }

flag = { true}

displayValue = { true}

  />

  </div>

  < /div>



  < div className = "col-lg-3" >

    <div className="amat-form-group add-flex" >

      <label htmlFor="platform" className = "" >

        Platform

        < /label>



        < MultiSelect

name = "platform"

selectedValue = { values.platform }

// data={platformData}

rolesArr = { [ACTION_OWNER]}

role = { sampleNewInitiateData.role }

touched = { touched.platform }

errors = { errors.platform }

setFieldValue = { setFieldValue }

setFieldTouched = { setFieldTouched }

flag = { true}

displayValue = { true}

  />

  </div>

  < /div>



  < div className = "col-lg-3" >

    <div className="amat-form-group add-flex" >

      <label htmlFor="designEngineer" className = "" >

        Engineer

        < /label>



        < MultiSelect

name = "designEngineer"

selectedValue = { values.designEngineer }

data = { adUserData["designEngineerData"]}

rolesArr = { [ACTION_OWNER]}

role = { sampleNewInitiateData.role }

touched = { touched.designEngineer }

errors = { errors.designEngineer }

setFieldValue = { setFieldValue }

setFieldTouched = { setFieldTouched }

inputValue = { values.designEngineer }

onInputChange = {(event: any, action: any) => {

  getADUsers(

    event,

    "designEngineerData",

    "designEngineer",

    action,

    setFieldValue

  );

}}

/>

  < /div>

  < /div>



  < div className = "col-lg-3" >

    <div className="amat-form-group add-flex" >

      <label

                                                                                                                                                                                                                                                               htmlFor="projectOwner"

  // className="required"

  >

  Owner

  < /label>



  < SelectField

name = "projectOwner"

selectedValue = { values.projectOwner }

data = { adUserData["projectOwnerData"]}

rolesArr = { [ACTION_OWNER]}

role = { sampleNewInitiateData.role }

touched = { touched.projectOwner }

errors = { errors.projectOwner }

setFieldValue = { setFieldValue }

setFieldTouched = { setFieldTouched }

onInputChange = {(event: any, action: any) => {

  getADUsers(

    event,

    "projectOwnerData",

    "projectOwner",

    action,

    setFieldValue

  );

}}

/>

  < /div>

  < /div>



  < div className = "col-lg-6" >

    <div className="amat-form-group add-flex" >

      <label htmlFor="projectTeam" className = "" >

        Project Team

          < /label>

{/* <div style={{ width: "150px" }}> */ }

<MultiSelect

                                                                                                                                                                                                                                                               name="projectTeam"

selectedValue = { values.projectTeam }

data = { adUserData["projectTeamData1"]}

rolesArr = { [ACTION_OWNER]}

role = { sampleNewInitiateData.role }

touched = { touched.projectTeam }

errors = { errors.projectTeam }

setFieldValue = { setFieldValue }

setFieldTouched = { setFieldTouched }

inputValue = { values.projectOwner }

onInputChange = {(event: any, action: any) => {

  getADUsers(

    event,

    "projectTeamData1",

    "projectTeam",

    action,

    setFieldValue

  );

}}

/>

{/* </div> */ }



{/* <span className="field-value">

                                  {fmecaHeader !== null &&

                                    fmecaHeader.projectTeam}

                                </span> */}

</div>

  < /div>



  < div className = "col-lg-3" >

    <div className="amat-form-group add-flex" >

      <label

                                                                                                                                                                                                                                                               htmlFor="criticalityTrigger"

className = ""

  >

  Criticality Trigger

    < /label>



    < Field

id = "criticalityTrigger"

name = "criticalityTrigger"

className = "field-number"

type = "number"

value = { values.criticalityTrigger }

  // defaultValue="20"

  />

  </div>

  < /div>



  < div className = "col-lg-4" >

    <div className="amat-form-group" >

      <label

                                                                                                                                                                                                                                                               htmlFor="IPSensitiveAttachments"

className = "mr-3"

  >

  IP Sensitive Attachments

    < /label>



{/* <div className="attachments-label">

                                                                                                                                                                                                                                                               {ipFiles &&

                                                                                                                                                                                                                                                                              ipFiles.length > 0 &&

                                                                                                                                                                                                                                                                              ipFiles.map((file: any) => (

                                                                                                                                                                                                                                                                                             <div>{file}</div>

                                                                                                                                                                                                                                                                              ))}

                                                                                                                                                                                                                                                </div> */}

<div className="" >

{/* <a

                                                                                                                                                                                                                                                                              href="#"

                                                                                                                                                                                                                                                                              className="grid-attachment choose_file mr-2"

                                                                                                                                                                                                                                                               >

                                                                                                                                                                                                                                                                              <RiAttachmentFill

                                                                                                                                                                                                                                                                                             fontSize={22}

                                                                                                                                                                                                                                                                                             style={{ color: "grey" }}

                                                                                                                                                                                                                                                                              />

                                                                                                                                                                                                                                                                              <input

                                                                                                                                                                                                                                                                                             type="file"

                                                                                                                                                                                                                                                                                             name="IPSensitiveAttachments"

                                                                                                                                                                                                                                                                                             onChange={(e) => {

                                                                                                                                                                                                                                                                                                            onHandleChangeIP(e);

                                                                                                                                                                                                                                                                                             }}

                                                                                                                                                                                                                                                                                             multiple

                                                                                                                                                                                                                                                                              />

                                                                                                                                                                                                                                                               </a> */}



  < div className = "d-flex align-items-center" >

    <div className="my-2 choose_file amat-btn amat-btn-primary d-flex align-items-center file-uploader-btn rounded part-btn" >

      <img

                                                                                                                                                                                                                                                                                                            src="../../assets/images/attachment-btn.svg"

width = "16"

className = "mr-2 attachment-btn"

  />

  <span>Choose a file < /span>

    < input

name = "attachments"

type = "file"

multiple

onChange = {(e) => {

  onHandleChangeIP(

    e,

    fmecaHeader.topLevelPartNumber

  );

}}

/>

  < /div>

  < BsThreeDotsVertical

onClick = {() => {

  const data = {

    partNumber:

      fmecaHeader.topLevelPartNumber,

    referenceFMECAID: referenceID,

    recordType: "ip",

  };

  setShowAttachmentModal(true);

  setAttachmentParams(data);

}}

style = {{

  cursor: "pointer",

    top: 0,

                                                                                                                                                                                                                                                                                             }}

fontSize = { 20}

  />

  </div>

  < div > </div>

  < /div>

  < /div>

  < /div>



  < div className = "col-lg-5" >

    <div className="amat-form-group" >

      <label htmlFor="attachments" className = "mr-3" >

        Attachments

        < /label>



{/* <div className="attachments-label">

                                                                                                                                                                                                                                                               {files &&

                                                                                                                                                                                                                                                                              files.length > 0 &&

                                                                                                                                                                                                                                                                              files.map((file: any) => <div>{file}</div>)}

                                                                                                                                                                                                                                                </div> */}

<div className=" d-flex align-items-center" >

  <div className="my-2 choose_file amat-btn amat-btn-primary d-flex align-items-center file-uploader-btn rounded part-btn" >

    <img

                                                                                                                                                                                                                                                                                             src="../../assets/images/attachment-btn.svg"

width = "16"

className = "mr-2 attachment-btn"

  />

  <span>Choose a file < /span>

    < input

name = "attachments"

type = "file"

multiple

onChange = {(e) => {

  onHandleChange(

    e,

    fmecaHeader.topLevelPartNumber

  );

}}

/>

  < /div>

  < BsThreeDotsVertical

onClick = {() => {

  const data = {

    partNumber:

      fmecaHeader.topLevelPartNumber,

    referenceFMECAID: referenceID,

    recordType: "parts",

  };

  setShowAttachmentModal(true);

  setAttachmentParams(data);

}}

style = {{

  cursor: "pointer",

    top: 0,

                                                                                                                                                                                                                                                                              }}

fontSize = { 20}

  />

  </div>

  < /div>

  < /div>



  < div className = "col-lg-12" >

    <label htmlFor="fmecaNote" className = "fmecaNote" >

      FMECA Note

        < /label>

        < div className = "amat-form-group d-flex align-items-start justify-content-between" >

          <div className="first-box" >

            { headerFmecaNotes &&

            headerFmecaNotes.length > 0 &&

            headerFmecaNotes.map(

              (note: any, index: any) => (

                <div

                                                                                                                                                                                                                                                                                                                           onClick= {() => copySelectedNote(note)}

              className = {`user-notes ${copiedNote?.id === note?.id

                  ? "note-selected"

                  : ""

                }`}

              key = { index }

              >

              <div className="avatar-icon" >

              <RxAvatar />

              < /div>



            < div className = "user-details" >

            <div>{ note.createdBy } < /div>

            < br />

            <span>

            { formatDate(note.createdOn)}

</span>

  < /div>



  < div className = "user-message" >

    { parse(note.description) }

    < /div>

    < /div>

                                                                                                                                                                                                                                                                                             )

                                                                                                                                                                                                                                                                              )}



{
  headerFmecaNotes &&

  headerFmecaNotes.length === 0 && (

    <div className="note-not-found" >

      <span>

      No Note found for this FMECA.

                                                                                                                                                                                                                                                                                                            < /span>

        < /div>

                                                                                                                                                                                                                                                                              )}

</div>



  < div className = "second-box" >

    <div className="quill-container" >

      <div ref={ quillRef } />

        < /div>



        < div className = "fmecaNote-editor" >

          <button

                                                                                                                                                                                                                                                                                             className={
  `amat-btn amat-btn-sm fmecaNote-btn ${!isEditing ? "disable-edit" : ""

  }`
}

disabled = {!isEditing}

onClick = {() => onEditClicked()}

                                                                                                                                                                                                                                                                              >

  <img

                                                                                                                                                                                                                                                                                                            src="../../../assets/images/edit.svg"

alt = "Save"

  />

  Edit

  < /button>



  < button

className = "amat-btn amat-btn-sm fmecaNote-btn"

disabled = { isEditing }

onClick = {() =>

note.description !== "" &&

  onAddClicked()

                                                                                                                                                                                                                                                                                             }

                                                                                                                                                                                                                                                                              >

  <AiOutlinePlusCircle className="add-icon" />

    Add

    < /button>

    < /div>

    < /div>

    < /div>

    < /div>

    < /div>

    < /div>

    < /div>

    < /div>

    < /div>

    < /div>

    < /div>

    < />

                                                                           );

                                                            }}

</Formik>



  < div

className = "accordian-bar-system"

onClick = {() => setDisplayGrid(!displayGrid)}

                                             >

  {
    displayGrid?(

                                                                           <span className = "arrow-icon" > </span>

    ): (

        <span className = "arrow-icon-down"></ span >

                                                            )}

<span>System FMECA Grid < /span>

  < /div>



  < div className = {`main-container-fluid ${displayGrid ? "show" : "hide"}`}>

    <div className={ `container-fluid ${displayGrid ? "show" : "hide"}` }>

      <div className="view-btn-container" >

        <button

                                                                                                         type="button"

id = "full-view"

className = "amat-btn amat-btn-sm full-view"

onClick = { handle.enter }

  // disabled={isSubmitting}

  >

  <BsArrowsFullscreen className="icon-style" />

    Full View

      < /button>

      < /div>

      < FullScreen handle = { handle } >

        <div

                                                                                                         className="ag-theme-alpine agGridTable"

style = {

  handle.active

    ? {

      height: "100%",

      marginTop: "10px",

      marginBottom: "10px",

      zIndex: "100",

    }

    : {

      height: 420,

      marginTop: "10px",

      marginBottom: "10px",

      zIndex: "100",

    }

}

  >

  <AgGridComponent

                                                                                                                        ref={ gridRef }

columnDefs = { columnDefs }

rowData = { newRowDataArr }

pagination = { true}

paginationPageSize = { 10}

defaultColDef = {{

  minWidth: 285,

    sortable: true,

      filter: true,

        flex: 1,

          editable: true,

                                                                                                                        }}

// enableRangeSelection={true}

onGridReady = { onGridReady }

rowSelection = { rowSelectionType }

// frameworkComponents={{

//   fmecaLink,

// }}

onCellValueChanged = { onCellValueChanged }

getContextMenuItems = { getContextMenu }

  />

  </div>

  < /FullScreen>



{
  showModal && (

    <RiskAssessmentModal

                                                                                                         showModal={ showModal }

  formData = { formData }

  setFormData = { setFormData }

  handleClose = { handleClose }

  handleUpdatePartRisk = { handleUpdatePartRisk }

  rowNodeValue = { rowNodeValue }

  criticalityTrigger = { criticalityTrigger }

    />

                                                                           )
}



<AlertMsg

                                                                                          showModal={ showAlert }

handleCancel = { handleCloseAlert }

handleOk = { handleCloseAlert }

alertMessage = { alertMessage }

hideCancel = { true}

  />



  <AlertMsg

                                                                                          showModal={ showDeleteAlert }

handleCancel = { handleCloseAlert }

handleOk = { handleDeleteRow }

alertMessage = { alertDeleteMessage }

hideCancel = { false}

  />

  </div>

  < /div>



  < Modal

isOpen = { showGenerateModal }

fade = { true}

className = "modal-dialog modal-dialog-centered"

style = {{ minWidth: 500, maxWidth: 500 }}

contentClassName = "modal-content border-0 rounded-0"

zIndex = { "100000"}

centered = { true}

  >

  <div className="modal-content border-0 rounded-0" >

    <div className="modal-header amathd m-0" >

      <h5 className="modal-title mb-2" id = "exampleModalLongTitle" >

        Select

        < /h5>

        < button

type = "button"

className = "close"

data - dismiss="modal"

aria - label="Close"

onClick = { closeGenerateModal }

  >

  <span aria - hidden="true" >& times; </span>

    < /button>

    < /div>



{/* </ModalHeader> */ }

<ModalBody className="modal-body px-4 py-4" >

  <div className="custom-form-group mt-2 d-flex justify-content-start align-items-center" >

    <input

                                                                                                                        type="radio"

onClick = {() => handleCriticalRisk(false)}

checked = { criticalRisk === false}

/>

  < span className = "ml-4" > All risks < /span>

    < /div>

    < div className = "custom-form-group mt-3 d-flex justify-content-start align-items-center" >

      <input

                                                                                                                        type="radio"

onClick = {() => handleCriticalRisk(true)}

checked = { criticalRisk === true}

/>

  < span className = "ml-4" > Only critical risks < /span>

    < /div>

    < /ModalBody>

    < ModalFooter className = "rounded-0" style = {{ background: "#efefef" }}>

      <button

                                                                                                         type="button"

className = "amat-btn amat-btn-sm amat-btn-secondary text-uppercase"

onClick = { handleGenerate }

  >

  <img src="../../assets/images/ok.svg" alt = "Save" />

    OK

    < /button>



    < button

className = "amat-btn amat-btn-sm amat-btn-light text-uppercase "

type = "button"

data - dismiss="modal"

aria - label="Close"

onClick = { closeGenerateModal }

style = {{ background: "#b7b7b7" }}

                                                                                          >

  <img

                                                                                                                        className="imgsrd"

src = "../../assets/images/close-grey.svg"

alt = "Cancel"

  />

  Exit

  < /button>

  < /ModalFooter>

  < /div>

  < /Modal>



{
  showSummaryModal && (

    <RiskSummaryModal

                                                                           showSummaryModal={ showSummaryModal }

  mainGridData = { mainGridData }

  closeSummaryModal = { closeSummaryModal }

  setRowData = { setRowData }

  rowData = { rowData }

  referenceID = { referenceID }

    />

                                             )
}



<AlertMsg

                                                            showModal={ isModalShow && isModalShowState }

handleCancel = { handleCloseAlert }

handleOk = { handleCloseAlert }

alertMessage = {

  isError

  ? "something went wrong please try again."

    : "Data has been saved successfully."

}

hideCancel = { true}

  />



  { showAttachmentModal && (

    <AttachmentModal

                                                                           showAttachmentModal={ showAttachmentModal }

setShowAttachmentModal = { setShowAttachmentModal }

attachmentParams = { attachmentParams }

  > </AttachmentModal>

                                             )}

</>

               );

};



export default SystemFMECA;